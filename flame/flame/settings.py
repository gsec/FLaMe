""" FLaMe settings
"""
from os import environ, path
from logging import getLogger


logger = getLogger(__name__)
global FLAME_OUTPUT, GROW_OUTPUT, DIFF_CAP, PICKLE_EXT, HDF_EXT

try:
    FLAME_OUTPUT = environ['FLAME_OUTPUT']
except KeyError as e:
    logger.warn("No {} specified. Please specify path manually.".format(e))
    FLAME_OUTPUT = ''
    while not path.isdir(FLAME_OUTPUT):
        FLAME_OUTPUT = input("Top level output directory: ")
logger.info("\nFLaMe output path set to: {}".format(FLAME_OUTPUT))


GROW_OUTPUT = path.join(FLAME_OUTPUT, 'grow')
SIM_OUTPUT = path.join(FLAME_OUTPUT, 'sim')
DIFF_CAP = 2.1
PICKLE_EXT = '.flm'
HDF_EXT = '.hdf'

# canonical file name for configs
PARAMS_YAML = 'sim_params.yaml'


def get_time():
    """ Returns formatted time string.

    If arrow import fails, warning is issued, and dummy string is returned.
    """
    try:
        import arrow
    except ImportError:
        logger.warn("Import of arrow failed. No time is recorded. Please check "
                    "dependencies.")
        return "n0timet0day"
    return arrow.now().format('YYYY-MM-DD HH-mm-ss').split(' ')


def get_skel(project_name):
    """ Returns formatted default yaml file.
    """
    skeleton = """\
# Configuration file generated by FLaMe @{time}.
# This file should be in its own directory where the simulation is started.
# Parameters specified here will be used for the growth simulation. Feel free
# to edit responsibly.

    # Name of the Project
name: {name}
    # Function string will be parsed as 'lambda x: ' + function
function: "{TP_FUNC}"
    # Values that will be fed as input to f(x)
values: {VALS}
    # How many averaging runs are done with exact same parameters
sample_size: {SMPSIZE}
    # Interval between Flake.geometry() calls
snapshot_interval: {SNAPSHOT}
    # End size of the flake in atoms
total_size: {TOTAL_SIZE}

    # These options are passed to growth.Flake() instances.
flake:
    temp: {FLAKE_TEMP}
    seed: {FLAKE_SEED}\
"""
    # defining defaults for sim_params file
    rendered = skeleton.format(
                    time=get_time(),
                    name=project_name,
                    TP_FUNC="(-(x%2), x, -x**2)",
                    VALS=[0, 1, 2, 3, 5],
                    SMPSIZE=10,
                    SNAPSHOT=100,
                    TOTAL_SIZE=200000,
                    FLAKE_TEMP=30,
                    FLAKE_SEED='point')

    return rendered
