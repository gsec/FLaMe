import sys
import yaml
from os import environ, path
from os.path import dirname as parent
from matplotlib.cm import viridis
from logging import getLogger

logger = getLogger(__name__)


def get_output_folder():
    """ Generate main output folder for `flame`.

    Check for ``FLAME_OUTPUT`` environment variable and sets this as base for the output
    folders. If no such variable exists, go to fall back mode and set path relative to
    program file path.
    """
    try:
        output_folder = environ['FLAME_OUTPUT']
    except KeyError as e:
        print(path.abspath(__file__))
        fallback = parent(parent(parent(__file__)))
        output_folder = path.join(fallback, 'output')
        logger.warning("{} not specified, hence chosen relative to "
                       "module directory as:\n{}".format(e, output_folder))
    return output_folder


""" Output paths for the simulation
"""
FLAME_OUTPUT = get_output_folder()
GROW_OUTPUT = path.join(FLAME_OUTPUT, 'grow')
SIM_OUTPUT = path.join(FLAME_OUTPUT, 'sim')
GRAPH_OUTPUT = path.join(FLAME_OUTPUT, 'graph')
TIMING_OUTPUT = path.join(FLAME_OUTPUT, 'timing')

PICKLE_EXT = '.flm'
HDF_EXT = '.h5'
HDF_METADATA = 'parameters'
PARAMS_YAML = 'sim_params.yaml'

""" This is the maximum distance between two atoms to be considered nearest neighbors.
"""
DIFF_CAP = 2.1


def get_time():
    """ Returns a list with two items: date and time.

    Both are formatted as unicode strings. If arrow import fails, warning is issued, and
    a dummy string is returned.
    """
    try:
        import arrow
    except ImportError:
        logger.warning("Import of arrow failed. No time is recorded. "
                       "Please check dependencies.")
        return "n0timet0day"
    return arrow.now().format('YYYY-MM-DD HH-mm-ss').split(' ')


def get_skel(project_name):
    """ Returns formatted default YAML file.
    """

    skeleton = """\
# Configuration file generated by FLaMe @{time}.
# This file should be in its own directory where the simulation is started.
# Parameters specified here will be used for the growth simulation. Feel free
# to edit responsibly.

    # Name of the Project
name: '{name}'
    # Function string will be parsed as 'lambda x: ' + function
function: '{TP_FUNC}'
    # Values that will be fed as input to f(x)
values: {VALS}
    # How many averaging runs are done with exact same parameters
sample_size: {SMPSIZE}
    # Interval between Flake.geometry() calls
snapshot_interval: {SNAPSHOT}
    # End size of the flake in atoms
total_size: {TOTAL_SIZE}

    # These options are passed to growth.Flake() instances.
flake:
    temp: {FLAKE_TEMP}
    seed: '{FLAKE_SEED}'\
"""
    rendered = skeleton.format(
                    **gen_params(time=get_time(), name=project_name))
    return rendered


def gen_params(**kwargs):
    """ Generate default set of flake growth parameters.

    Can be updated with any valid keyword argument provided.
    """
    default = {'TP_FUNC': "0, x",
               'VALS': [0, 1, 2],
               'SMPSIZE': 2,
               'SNAPSHOT': 300,
               'TOTAL_SIZE': 2000,
               'FLAKE_TEMP': 500,
               'FLAKE_SEED': 'point'}

    default.update(kwargs)
    return default


def get_params():
    """ Ensures the parameters are read in from a YAML file.

    A simulation is defined through its configuration file. Here we use YAML
    since it is human- and machine-readable.
    """
    try:
        with open(PARAMS_YAML, 'r') as file_handler:
            params = yaml.load(file_handler)
        return params
    except IOError:     # pragma: no cover
        sys.exit("'{}' must be created before running a simulation. Try the `create` "
                 "command or look at `flame --help`".format(PARAMS_YAML))


def get_colors(twins):
    """ Generate colors for different twinplanes.

    Scales the index evenly between twinplanes and returns a RGBA float value from the
    colormap (here: viridis).
    """
    norm = float(len(twins) - 1)
    if norm == 0:
        logger.info("Single Flakes, no averaging.")
        norm = 1

    color_filler = []
    for idx, tp in enumerate(twins):
        scala = idx/norm
        rescaled = tuple(x*255 for x in viridis(scala)[:-1])
        color_filler.append(rescaled)

    return zip(range(len(twins)), twins, color_filler)


class AtomsIO():
    """ Creates the atom object with two slots.

    This is the format to export a blender file. Exports as four columns defining element
    and position in a text file::

        |ELEM|  |X|  |Y|  |Z|
        |ELEM|  |X|  |Y|  |Z|
        ...
    """
    __slots__ = ('element', 'location')

    def __init__(self, element, location):
        self.element = element
        self.location = location


def blender_helper(name):
    time_string = '@'.join(get_time())
    fnamexyz = "{}__{}.{}".format(name, time_string, 'xyz')
    fnameinfo = "{}__{}.{}".format(name, time_string, 'info')
    header = """XYZ file (Blender format) ++++++++++++++++++

Inital conditions:
    Twinplanes: {twin}
    Temperature: {temp}
    Seed: {shape}

Flake Properties:

{geo}"""

    return (header, path.join(GROW_OUTPUT, fnamexyz), path.join(GROW_OUTPUT, fnameinfo))
